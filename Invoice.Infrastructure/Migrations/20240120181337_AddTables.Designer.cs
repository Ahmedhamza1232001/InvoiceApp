// <auto-generated />
using System;
using Invoice.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Invoice.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240120181337_AddTables")]
    partial class AddTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("BaseEntitySequence");

            modelBuilder.Entity("Invoice.Core.Models.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [BaseEntitySequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Invoice.Core.Models.Addon", b =>
                {
                    b.HasBaseType("Invoice.Core.Models.BaseEntity");

                    b.Property<int>("AddonType")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceTabId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("InvoiceTabId");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("Invoice.Core.Models.Customer", b =>
                {
                    b.HasBaseType("Invoice.Core.Models.BaseEntity");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Invoice.Core.Models.InvoiceProduct", b =>
                {
                    b.HasBaseType("Invoice.Core.Models.BaseEntity");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceProducts");
                });

            modelBuilder.Entity("Invoice.Core.Models.InvoiceTab", b =>
                {
                    b.HasBaseType("Invoice.Core.Models.BaseEntity");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("CustomerId");

                    b.ToTable("InvoiceTabs");
                });

            modelBuilder.Entity("Invoice.Core.Models.Product", b =>
                {
                    b.HasBaseType("Invoice.Core.Models.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Invoice.Core.Models.Discount", b =>
                {
                    b.HasBaseType("Invoice.Core.Models.Addon");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Invoice.Core.Models.Tax", b =>
                {
                    b.HasBaseType("Invoice.Core.Models.Addon");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("Invoice.Core.Models.Addon", b =>
                {
                    b.HasOne("Invoice.Core.Models.InvoiceTab", null)
                        .WithMany("Addons")
                        .HasForeignKey("InvoiceTabId");
                });

            modelBuilder.Entity("Invoice.Core.Models.InvoiceProduct", b =>
                {
                    b.HasOne("Invoice.Core.Models.InvoiceTab", "Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Invoice.Core.Models.Product", "Product")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Invoice.Core.Models.InvoiceTab", b =>
                {
                    b.HasOne("Invoice.Core.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Invoice.Core.Models.Discount", b =>
                {
                    b.HasOne("Invoice.Core.Models.Product", null)
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Invoice.Core.Models.InvoiceTab", b =>
                {
                    b.Navigation("Addons");

                    b.Navigation("InvoiceProducts");
                });

            modelBuilder.Entity("Invoice.Core.Models.Product", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("InvoiceProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
